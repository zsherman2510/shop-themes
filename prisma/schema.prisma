generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  image         String?
  emailVerified DateTime?
  firstName     String?
  lastLogin     DateTime?
  lastName      String?
  metadata      Json?
  permissions   String[]
  status        UserStatus @default(ACTIVE)
  storeId       String?
  role          UserRole   @default(CUSTOMER)
  isActive      Boolean    @default(true)
  Account       Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId, provider])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionToken])
  @@index([userId])
}

model Stores {
  id            String          @id @default(cuid())
  name          String
  description   String?
  domain        String?         @unique
  logo          String?
  settings      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  shippingZones ShippingZones[]
}

model Products {
  id            String             @id @default(cuid())
  name          String
  description   String?
  price         Decimal            @db.Decimal(10, 2)
  images        String[]
  categoryId    String?
  inventory     Int                @default(0)
  isActive      Boolean            @default(true)
  metadata      Json?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  sku           String             @unique
  type          ProductType        @default(PHYSICAL)
  fileUrl       String?
  previewUrl    String?
  version       String?
  requirements  Json?
  features      String[]           @default([])
  documentation String?
  orderItems    OrderItems[]
  category      Categories?        @relation(fields: [categoryId], references: [id])
  downloads     ProductDownloads[]
  licenses      ProductLicenses[]

  @@index([categoryId])
  @@index([sku])
}

model Categories {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parent      Categories?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Categories[] @relation("SubCategories")
  products    Products[]
}

model Orders {
  id                String        @id @default(cuid())
  orderNumber       String        @unique
  status            OrderStatus   @default(PENDING)
  total             Decimal
  shippingAddressId String?
  billingAddressId  String?
  paymentIntent     String?
  paymentStatus     PaymentStatus @default(PENDING)
  shippingMethod    String?
  trackingNumber    String?
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  customerId        String?
  guestEmail        String?
  guestName         String?
  items             OrderItems[]
  billingAddress    Addresses?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  customer          Customers?    @relation(fields: [customerId], references: [id])
  shippingAddress   Addresses?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])

  @@index([customerId])
  @@index([status])
}

model OrderItems {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  order     Orders   @relation(fields: [orderId], references: [id])
  product   Products @relation(fields: [productId], references: [id])
}

model Addresses {
  id             String     @id @default(cuid())
  firstName      String
  lastName       String
  company        String?
  street         String
  apartment      String?
  city           String
  state          String
  postalCode     String
  country        String
  phone          String?
  isDefault      Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  customerId     String?
  guestEmail     String?
  guestName      String?
  customer       Customers? @relation(fields: [customerId], references: [id])
  billingOrders  Orders[]   @relation("BillingAddress")
  shippingOrders Orders[]   @relation("ShippingAddress")

  @@index([customerId])
}

model Settings {
  id             String   @id @default(cuid())
  logoId         String?  @unique
  faviconId      String?  @unique
  themeId        String
  contactEmail   String?
  contactPhone   String?
  address        String?
  socialLinks    Json?
  metaTags       Json?
  analytics      Json?
  currency       String   @default("USD")
  locale         String   @default("en")
  timezone       String   @default("UTC")
  features       Json?
  checkoutConfig Json?
  shippingZones  Json?
  taxConfig      Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  paymentConfig  Json?
  favicon        Media?   @relation("FaviconImage", fields: [faviconId], references: [id])
  logo           Media?   @relation("LogoImage", fields: [logoId], references: [id])
  theme          Themes   @relation(fields: [themeId], references: [id])
}

model Themes {
  id              String     @id @default(cuid())
  name            String
  primaryColor    String
  secondaryColor  String
  accentColor     String
  backgroundColor String
  textColor       String
  buttonStyles    Json
  fontFamily      String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  settings        Settings[]
}

model Pages {
  id               String         @id @default(cuid())
  title            String
  slug             String         @unique
  content          Json
  status           PageStatus     @default(DRAFT)
  layout           PageLayout     @default(FULL_WIDTH)
  isSystem         Boolean        @default(false)
  templateId       String?
  metaTitle        String?
  metaDescription  String?
  ogImage          String?
  showInNavigation Boolean        @default(true)
  navigationLabel  String?
  navigationOrder  Int?
  visibility       PageVisibility @default(PUBLIC)
  publishedAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  parentId         String?
  parent           Pages?         @relation("PageHierarchy", fields: [parentId], references: [id])
  children         Pages[]        @relation("PageHierarchy")
  template         Templates?     @relation(fields: [templateId], references: [id])
  sections         Sections[]
  permissions      Permissions[]  @relation("PageToPermission")
}

model Sections {
  id        String      @id @default(cuid())
  type      SectionType
  title     String?
  content   Json
  style     Json?
  order     Int
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  pageId    String
  settings  Json?
  page      Pages       @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId, order])
}

model Media {
  id         String    @id @default(cuid())
  name       String
  url        String
  bucketId   String
  type       MediaType @default(IMAGE)
  size       Int
  mimeType   String?
  alt        String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  faviconFor Settings? @relation("FaviconImage")
  logoFor    Settings? @relation("LogoImage")
}

model Navigations {
  id        String         @id @default(cuid())
  name      String
  type      NavigationType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  items     NavItems[]
}

model NavItems {
  id           String      @id @default(cuid())
  navigationId String
  label        String
  icon         String?
  link         String?
  order        Int
  parentId     String?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  navigation   Navigations @relation(fields: [navigationId], references: [id])
  parent       NavItems?   @relation("SubItems", fields: [parentId], references: [id])
  children     NavItems[]  @relation("SubItems")

  @@index([navigationId, order])
}

model Permissions {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pages     Pages[]  @relation("PageToPermission")
}

model Components {
  id        String   @id @default(cuid())
  name      String
  type      String
  config    Json
  style     Json?
  isGlobal  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Templates {
  id          String   @id @default(cuid())
  name        String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  sections    Json
  settings    Json?
  thumbnail   String?
  type        PageType
  pages       Pages[]
}

model ShippingZones {
  id        String          @id @default(uuid())
  name      String
  countries String[]
  storeId   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  rates     ShippingRates[]
  store     Stores          @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model ShippingRates {
  id        String        @id @default(uuid())
  name      String
  price     Float
  minWeight Float?
  maxWeight Float?
  minOrder  Float?
  maxOrder  Float?
  zoneId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  zone      ShippingZones @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([zoneId])
}

model Customers {
  id        String             @id @default(cuid())
  email     String             @unique
  firstName String?
  lastName  String?
  phone     String?
  status    String             @default("ACTIVE")
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  addresses Addresses[]
  orders    Orders[]
  downloads ProductDownloads[]
  licenses  ProductLicenses[]
}

model ProductDownloads {
  id            String     @id @default(cuid())
  productId     String     @unique
  customerId    String?
  orderNumber   String
  downloadUrl   String
  downloadCount Int        @default(0)
  expiresAt     DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  customer      Customers? @relation(fields: [customerId], references: [id])
  product       Products   @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([customerId])
  @@index([orderNumber])
}

model ProductLicenses {
  id               String        @id @default(cuid())
  productId        String        @unique
  customerId       String?
  orderNumber      String
  licenseKey       String        @unique
  type             LicenseType   @default(STANDARD)
  status           LicenseStatus @default(ACTIVE)
  expiresAt        DateTime?
  activationsLimit Int?
  activationsCount Int           @default(0)
  metadata         Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  customer         Customers?    @relation(fields: [customerId], references: [id])
  product          Products      @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([customerId])
  @@index([orderNumber])
}

enum UserRole {
  ADMIN
  CUSTOMER
  TEAM
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PageVisibility {
  PUBLIC
  PRIVATE
  PASSWORD_PROTECTED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

enum PageLayout {
  FULL_WIDTH
  BOXED
  SIDEBAR_LEFT
  SIDEBAR_RIGHT
}

enum SectionType {
  HERO
  FEATURED_PRODUCTS
  PRODUCT_GRID
  TEXT_BLOCK
  IMAGE_GALLERY
  NEWSLETTER
  TESTIMONIALS
  CONTACT_FORM
  CUSTOM_HTML
  CATEGORY_SHOWCASE
  BANNER
  COUNTDOWN
  SOCIAL_FEED
  VIDEO
  FAQ
  PRICING_TABLE
  TEAM_MEMBERS
  BLOG_POSTS
  ANNOUNCEMENT_BAR
  COLLECTION_LIST
  PROMOTION_BANNER
  REVIEWS
  SIZE_CHART
  PRODUCT_COMPARISON
  RELATED_PRODUCTS
  RECENTLY_VIEWED
  INSTAGRAM_FEED
  STORE_LOCATOR
}

enum NavigationType {
  ADMIN_SIDEBAR
  MAIN_MENU
  FOOTER_MENU
  MOBILE_MENU
}

enum PageType {
  LANDING
  HOME
  PRODUCTS
  PRODUCT_DETAIL
  CATEGORY
  CHECKOUT
  CART
  ACCOUNT
  CUSTOM
}

enum DigitalType {
  THEME
  TEMPLATE
  PLUGIN
  ASSET_PACK
  COMPONENT
  APP
}

enum LicenseType {
  STANDARD
  EXTENDED
  UNLIMITED
  TRIAL
}

enum LicenseStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

enum ProductType {
  PHYSICAL
  DIGITAL
  SUBSCRIPTION
}
